#fancy indexing: 불연속적인 임의의 인덱스를 순서 무관 선택할 수 있음!
#일반 indexing과의 차이!

#fancy indexing: arr[[행], [열]]...대괄호!
# ex) arr[:, [2, 0, 1]] 
#     arr[[4, 3, 0, 6], [2, 0, 1, 3]]  
#     arr[[4, 3, 0, 6], 2]  

import numpy as np
arr = np.zeros((8, 4)) # 8행 4열의 0 모음
for i in range(8):
    arr[i] = i # i 번째 행에 i 삽입
print(arr)
# [[0. 0. 0. 0.]
#  [1. 1. 1. 1.]
#  [2. 2. 2. 2.]
#  [3. 3. 3. 3.]
#  [4. 4. 4. 4.]
#  [5. 5. 5. 5.]
#  [6. 6. 6. 6.]
#  [7. 7. 7. 7.]]
print(arr[[4, 3, 0, 6], [1, 2, 0, 3]])
# 4행 1열, 3행 2열, 0행 0열, 6행 3열의 요소들
#[4. 3. 0. 6.]

arr = np.arange(32).reshape((8, 4))
print(arr)
# [[ 0  1  2  3]
#  [ 4  5  6  7]
#  [ 8  9 10 11]
#  [12 13 14 15]
#  [16 17 18 19]
#  [20 21 22 23]
#  [24 25 26 27]
#  [28 29 30 31]]
print(arr[[1, 5, 7, 2], [0, 3, 1, 2]])
#[ 4 23 29 10] 
#일반 인덱싱과 마찬가지로 0행 0열 부터 시작!!
#0"번째" 행/열은 없음!!!!!!!!!!!!!
arr[[1, 5, 7, 2], [0, 3, 1, 2]] = 0
print(arr)
# [[ 0  1  2  3]
#  [ 0  5  6  7]
#  [ 8  9  0 11]
#  [12 13 14 15]
#  [16 17 18 19]
#  [20 21 22  0]
#  [24 25 26 27]
#  [28  0 30 31]]

#chained fancy indexing: arr[[]][[]] 가운데 쉼표 없이!!
chained = arr[[1, 5, 7, 2]][:, [0, 3, 1]]
#[:]는 "이미 선택된 모든 행"을 의미
# arr[[1, 5, 7, 2]]를 통해 원본 배열에서 1, 5, 7, 2 행만 추출해서 4개의 행을 가지는 새로운 배열(임시 배열이라고 부르겠습니다)을 만듭니다.
# 그 다음 [:, [0, 3, 1, 2]]에서 [:]는 "임시 배열의 모든 행"을 의미합니다. 즉, 우리가 1단계에서 선택한 행들(1, 5, 7, 2 행)을 모두 유지합니다.
# [0, 3, 1, 2]는 임시 배열에서 선택할 열의 인덱스를 나타냅니다.

# 1번 행에서 → 0, 3, 1번 열 선택
# 5번 행에서 → 0, 3, 1번 열 선택
# 7번 행에서 → 0, 3, 1번 열 선택
# 2번 행에서 → 0, 3, 1번 열 선택
print(chained)
# [[ 0  7  5]
#  [20  0 21]
#  [28 31  0]
#  [ 8 11  9]]