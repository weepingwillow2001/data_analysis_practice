import numpy as np
rng = np.random.default_rng(seed=12345)
arr = rng.standard_normal((5, 4))
print(arr)
# [[-1.42382504  1.26372846 -0.87066174 -0.25917323]
#  [-0.07534331 -0.74088465 -1.3677927   0.6488928 ]
#  [ 0.36105811 -1.95286306  2.34740965  0.96849691]
#  [-0.75938718  0.90219827 -0.46695317 -0.06068952]
#  [ 0.78884434 -1.25666813  0.57585751  1.39897899]]
print(np.mean(arr)) #0.0010611661248891013
print(np.sum(arr)) #0.021223322497782027

print(arr.mean(axis=1)) #[-0.32248289 -0.38378196  0.4310254  -0.0962079   0.37675318]
#"행! 방향(가로)"으로 평균을 계산
print(arr.sum(axis=0)) #[-1.10865307 -1.78448912  0.21785956  2.69650595]
#"열! 방향(세로)"으로 합계를 계산

# axis는 배열의 행,열과 순서 반대!!!


#cumsum: 누적 합
#cumprod: 누적 곱
arr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8])
print(arr.cumsum())
# [0, 1, 3, 6, 10, 15, 21, 28, 36]

# 다차원 배열에서 cumsum 같은 누적 함수는 1차원 배열을 반환한다.
# 하지만 축(axis)을 지정해 누적계산을 하면 원본 배열과 같은 차원을 가진 배열을 반환환
arr = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])
# [[0, 1, 2],
#  [3, 4, 5],
#  [6, 7, 8]]

print(arr.cumsum(axis=0)) #열의 누적합
# [[0, 1, 2],     0    , 1    , 2
#  [3, 5, 7],     0+3  , 1+4  , 2+5
#  [9, 12, 15]]   0+3+6, 1+4+7, 2+5+8

print(arr.cumsum(axis=1)) #행의 누적합
# [[0, 1, 3],      ０、 ０＋１、 ０＋１＋２
#  [3, 7, 12],     ３、 ３＋４、 ３＋４＋５
#  [6, 13, 21]]    ６、 ６＋７、 ６＋７＋８